Name: Nathan Tjoar
UID: 005081232
Prof: Paul Eggert
Lab Assignment #1

1.1
  2.  M-<
      C-s H T M L
  3.  C-s s c a v e n g e r
      C-s
  4.  C-s s e l f - r e f e r e n t i a l
      C-s
  5.  M-<
      C-s a r r o w
      C-s
  6.  C-e
  7.  C-a
  8.  Emacs shortcuts using its builtin functions allow for quicker responses and results.
  9.  No arrow keys used first time around
  10. C-x C-c y
1.2
  2.  M-g M-g
      1 8
      C-k
  3.  M-<
      C-s D E L E T E - M E sp D E L E T E - M E sp D E L E T E - M E
      C-a
      C-k
  4.  M-<
      C-s
      h t t p s : / /  e n . w i k i p e d i a . o r g / w i k i / H T M L _ c o m m e n t # C o m m e n t s
      C-s
      C-a
      C-p
      C-@
      C-n C-n C-n
      C-w
  5.  M-<
      C-r
      < ! - -  ENT
      C-k
      ---
      C-r C-r
      < ! - -
      C-@
      C-n C-n C-n C-n
      C-w
      ---
      C-r
      < ! - -
      C@
      C-e C-b C-b C- b C-b C-b
      C-w
1.3
  2.  C-s A s s i g n m e n t sp 1
      M-% A s s i g n m e n t 4 2 ENT y
      ---
      C-s A s s i g n m e n t sp 1
      M-% A s s i g n m e n t 4 2 ENT y
  3.  M-<
      C-s U T F - 8
      M-% U S - A S C I I ENT y
  4.  M-<
      C-M-s [ ^ [ : a s c i i : ] ]
      C-a
      C-k 
  5.  M-<
      C-s < / o l >
      ENT ENT
  6.  C-x C-c y 
      d i f f sp - u sp e x e r 1 . h t m l sp e x e r 3 . h t m l sp > e x e r 3 . d i f f
1.4
  1.  c a t sp e x e r 2 . h t m l sp e x e r 2 . d i f f sp > e x e r 4 . h t m l
  2.  e m a c s sp e x e r 4 . h t m l
  3.  C-s < ! - - C-r
      C-@ C-e M-w
      M-< C-s < / h 2 > C-n C-n C-y
      ---
      C-s C-s C-s C-r
      C-@ C-e M-w
      M-g M-g 1 2 7 C-y
      ---
      C-s C-s C-s C-s C-r
      C-n BKSP C-n C-f BKSP
      C-p C-p C-f C-@
      C-n C-n C-e M-w
      M-g M-g 3 4 0 C-y ENT
      ---
      C-s C-s C-s C-s C-s C-s C-r
      C-@ C-e C-b C-b C-b C-b C-b
      M-w M-g M-g 3 8 6 C-e 
      C-b C-b C-b C-b C-b C-y
      ---
      C-s C-s C-s C-s C-s C-s C-s C-r
      C-n BKSP C-n C-f BKSP C-n C-f BKSP
      C-p C-p C-p C-f C-@ C-n C-n C-n C-e
      M-w M-g M-g 3 8 7 C-y ENT
      --- 
      C-s C-s C-s C-s C-s C-s C-s C-s C-r
      C-@ C-e M-w M-g M-g 4 0 5 C-y
  4.  See 3
  5.  C-f C-@ M-> C-w
  6.  C-x u
  7.  - - > 
      M-g M-g 4 0 6 
      < ! - - ENT
  8.  M-< M-% < o l > ENT
      < o L> ENT
      y y y y y y y
  9.  d i f f sp - u sp e x e r 1 . h t m l sp e x e r 4 . h t m l sp > e x e r 4 . d i f f
1.5
      M-! m k d i r sp ~ / j u n k
  2.  c d sp j u n k
      C-x C-f h e l l o . c
      *Copy and paste the given program into the file*
  3.  M-x c o m p i l e ENT m a k e h e l l o ENT
  4.  C-x C-c e m a c s
      M-! c d sp j u n k
      M-! g c c sp - o sp h e l l o sp h e l l o . c
      M-! . / h e l l o
  5.  C-x C-f M-x a p p e n d - t o - f i l e ENT
      ~ / 3 5 L / L A B 1 / H W / A s s i g n m e n t 1 ENT
#include <stdio.h>
int
main (void)
{
  char n = '\n', b = '\\', q = '"';
  char const *p = "#include <stdio.h>%cint%cmain (void)%c{%c  char n = '%cn', b = '%c%c', q = '%c';%c  char const *p = %c%s%c;%c  printf (p, n, n, n, n, b, b, b, q, n, q, p, q, n, n, n, n);%c  return 0;%c}%c";
  printf (p, n, n, n, n, b, b, b, q, n, q, p, q, n, n, n, n);
  return 0;
}
1.6
  1.  e m a c s
      C-x b ENT
  2.  r a n d o m sp " 0 0 5 - 0 8 1 - 2 3 2 "
      Result: "005-081-232"
  3.  ( s e t q sp x sp ( r a n d o m ) ) C-j
      x=1988360976377800716
      ( s e t q sp y sp ( r a n d o m ) ) C-j
      y=1659782355889808789
  4.  ( * sp x sp y )
      Result:-151696652699809028
  5.  M-: ( * sp x sp y )
      Result:-151696652699809028 (#o367450413126615445374, #x3de510b2b6364afc)
      Difference is that this version provides octadecimal and hexidecimal results.
  6.  The numbers will never be truly random in the mathematical sense because the numbers in the system will be a finite limit stuck there. Additionally, with any  random command, the  command usually shuffles through a large set of numbers in an order given and picks some random one in that the range is large enough so the user cannot notice very much.
  7.  I believe that there will be an incorrect answer if there is the chance of overflow in the algebraic calculation. This answer is due to the fact that binary addition is being done in the system and as such, overflow answers will lead to an incorrect result of flipping the symbol.